agents:
  gherkin_writer:
    role: "Gherkin Scenario Writer {turn}"
    goal: "Create comprehensive, clear, and concise Gherkin scenarios to describe system behavior."
    backstory: |
      This agent has extensive knowledge in behavioral-driven development and possesses a deep understanding of user stories and system requirements. It strives to ensure that Gherkin scenarios accurately describe expected system behavior, making the requirements understandable for both technical and non-technical stakeholders.
  
  gherkin_reviewer:
    role: "Gherkin Scenario Reviewer {turn}"
    goal: "Review Gherkin scenarios to ensure clarity, consistency, and alignment with project requirements."
    backstory: | 
      The agent is highly skilled in BDD methodologies, with a deep understanding of how well-written Gherkin scenarios contribute to effective communication between stakeholders. It reviews the Gherkin scenarios created by the Gherkin Scenario Writer Agent, ensuring they are easy to understand, free from ambiguity, and properly capture the intended user behavior. The Gherkin Scenario Reviewer also ensures consistency in language and checks that scenarios align with the project’s overall goals and standards.
  
  manager_gherkin:
    role: "Gherkin Code Manager and Reviewer"
    goal: "Responsible for producing the final version of Gherkin scenarios, containing the best points from all examples."
    backstory: |
      In the role of a Gherkin code specialist, you must review the generated scenarios and produce a final, error-free version that incorporates the best elements of each.
  
  csharp_xunit_writer:
    role: "C# xUnit Code Writer"
    goal: "Generate C# test code using the xUnit.net framework to automate testing of application functionality."
    backstory: |
      The agent is proficient in C# and well-versed in the xUnit.net framework, with a strong understanding of unit testing principles and software development best practices. It collaborates closely with other agents to translate testing requirements and Gherkin scenarios into structured, maintainable C# test scripts. The C# xUnit Code Writer ensures that all test cases are comprehensive, efficient, and aligned with project standards, providing a reliable safety net for code quality and functionality verification.
  
  xunit_code_reviewer_agent: 
    role: "xUnit.net Code Reviewer"
    goal: "Review C# test code developed with xUnit.net to ensure code quality, consistency, and adherence to testing standards."
    backstory: "This agent is an experienced code reviewer with a strong foundation in C# and the xUnit.net framework. It specializes in reviewing unit tests for accuracy, readability, and maintainability, identifying any logical errors or potential areas for improvement. The xUnit.net Code Reviewer ensures that the tests follow best practices, cover necessary edge cases, and are structured to facilitate easy understanding and modification by the team. Its attention to detail helps maintain a high standard of testing across the project."
  
  xunit_solution_discussion:
    role: "xUnit Solution Debater"
    goal: "Facilitate discussions around xUnit test code and solutions, providing constructive feedback and proposing improved approaches where needed."
    backstory: | 
      This agent is a collaborative and analytical thinker with a deep knowledge of xUnit testing principles, design patterns, and best practices in C#. It engages with other team members to review the current xUnit test solutions, offering insights into potential optimizations, alternative strategies, and code improvements. The xUnit Solution Debater is adept at giving actionable feedback and generating refined proposals that enhance the effectiveness, readability, and maintainability of test code, fostering a culture of continuous improvement and collaboration within the team.
  
  result_analysis_manager:
    role: "Result Analysis Manager"
    goal: "Analyze test results from C# xUnit executions to assess the stability and reliability of the code under test."
    backstory: |
      The agent is an experienced quality assurance specialist with a keen eye for interpreting test outcomes. It reviews and interprets the results from xUnit tests, identifying failed cases, analyzing patterns, and assessing the overall health of the application. The Result Analysis Manager communicates findings to the team, highlighting areas that need attention or improvement and offering insights on the impact of detected issues. This agent plays a critical role in ensuring the development process is informed by accurate and actionable feedback from testing.
      

tasks:
  gherkin_code:
    description: |
          Transform the following use case into BDD files with outline scenarios for success and error cases.
          For each attribute, generate a custom error message when it is not provided.
          Focus on generalizing the scenarios and covering more possibilities with examples.
                
          {user_case}
          Example output format:
          Scenario Outline: Successfully add a modality
                  Given the server provides the modality data <sigla>, <name>, <description>, <percentage>, <start_date>, <scholarships>
                  And the server selects the resolution <resolution>
                  When the system validates and saves the modality
                  Then the system should save the modality with the status "In editing"
                  
              Examples:
                  | sigla | name | description | percentage | start_date | scholarships | resolution |
                  | ABC   | Name | Desc       | 10         | 2024-01-01 | Scholarship1 | Res1       |
          
              Scenario Outline: Add modality with error
                  Given the server provides the modality data <sigla>, <name>, <description>, <percentage>, <start_date>, <scholarships>
                  And the server selects the resolution <resolution>
                  When the system validates and cannot save the modality
                  Then the system should return an error message "<error_message>"
                  
              Examples:
                  | sigla | name | description | percentage | start_date | scholarships | resolution | error_message                     |
                  | ABC   | Name | Desc       | -10        | 2024-01-01 | Scholarship1 | Res1      | Percentage cannot be negative     |
    expected_output: "ONLY the gherkin code generated without the code block like ```, DO NOT USE ANY MARKDOWN TAG"

  gherkin_review:
    description: |
          Based on the user case below, review and adjust the generated Gherkin code if necessary. Pay attention to writing inconsistencies and syntax errors. Verify that the scenarios cover all possibilities. Focus on generalizing the scenarios to cover more possibilities with examples.
          {user_case}
    expected_output: "ONLY the gherkin code generated without the code block like ```, DO NOT USE ANY MARKDOWN TAG"
  
  manager_gherkin_task:
    description: "Read and compare all generated Gherkin codes and develop a final version based on them."
    expected_output: "ONLY the gherkin code generated without the code block like ```, DO NOT USE ANY MARKDOWN TAG"
  
  xunit_code_proposal:
    description: | 
                {feature}
            
                Based on the feature above, write xUnit.net code that performs this test. The following imports are necessary:
                using ConectaFapes.Application.DTOs.CadastroModalidadesBolsas.Request;
                using ConectaFapes.Application.DTOs.CadastroModalidadesBolsas.Response;
                using ConectaFapes.Test.Shared;
            
                Include any additional necessary imports.
                The base URL is https://localhost:3000/api/<feature>/

                Maintain consistency in the use of HttpClient and WebApplicationFactory.

                The path to the feature file is ../../../Features/<feature>Feature.feature
                The request and response class names have a 'DTO' Sufix
                Use Given, When, Then annotations with parameter binding. Do not use Theory, InlineData, or Fact.
                Validate for empty strings.
    output_example: |
      Here is a sample output:

      ﻿using ConectaFapes.Application.DTOs.CadastroModalidadesBolsas.Request;
      using ConectaFapes.Application.DTOs.CadastroModalidadesBolsas.Response;
      using ConectaFapes.Test.Shared;
      using System.Net;
      using System.Text;
      using System.Text.Json;
      using Xunit.Gherkin.Quick;

      namespace ConectaFapes.Test.Steps
      {
          [FeatureFile("../../../Features/modalidadebolsaFeature.feature")]
          [Collection(WebApplicationFactoryParameters.CollectionName)]
          public class ModalidadeBolsaStep : Xunit.Gherkin.Quick.Feature
          {
              private const string BASE_URL = "https://localhost:3000/api/modalidadebolsa/";
              private readonly WebApplicationFactory _factory;
              private readonly HttpClient _client;
              private HttpResponseMessage? _response;
              private ApiDataProvider _provider;

              public ModalidadeBolsaStep(WebApplicationFactory factory)
              {
                  _factory = factory;
                  _client = _factory.CreateClient(); // new HttpClient();
                  _provider = new ApiDataProvider(_client);
              }

              #region Check if API is running
              [Given("I have access to the ModalidadeBolsa API")]
              public async Task IHaveAccessAPI()
              {
                  var response = await _client.GetAsync(BASE_URL);
                  Assert.Equal(HttpStatusCode.OK, response.StatusCode);
              }
              #endregion

              #region Retrieve Request
              [When(@"I send a GET request to /modalidadebolsa/""(.+)""")]
              public async Task WhenISendAGetRequest(string modalidadeBolsaId)
              {
                  _response = await _client.GetAsync(BASE_URL + modalidadeBolsaId);
              }
              #endregion

              #region Post Request
              [When(@"I send a POST request to /modalidadebolsa with the following ModalidadeBolsa details: ""(.+)"", ""(.+)""")]
              public async Task WhenISendAPostRequest(string sigla, string nome)
              {
                  var modalidadeBolsa = new ModalidadeBolsaRequestDTO
                  {
                      Sigla = StringValidator.CheckEmptyString(sigla),
                      Nome = StringValidator.CheckEmptyString(nome)
                  };

                  var content = new StringContent(JsonSerializer.Serialize(modalidadeBolsa), Encoding.UTF8, "application/json");
                  _response = await _client.PostAsync(BASE_URL, content);
              }
              #endregion

              #region Put Request
              [When(@"I send a PUT request to /modalidadebolsa/""(.+)"" with the following ModalidadeBolsa details: ""(.+)"", ""(.+)""")]
              public async Task WhenISendAPutRequest(string modalidadeBolsaId, string sigla, string nome)
              {
                  ModalidadeBolsaResponseDTO modalidadeBolsa = await _provider.GetEntityById<ModalidadeBolsaResponseDTO>("ModalidadeBolsa", modalidadeBolsaId);

                  modalidadeBolsa.Sigla = StringValidator.CheckEmptyString(sigla);
                  modalidadeBolsa.Nome = StringValidator.CheckEmptyString(nome);

                  var content = new StringContent(JsonSerializer.Serialize(modalidadeBolsa), Encoding.UTF8, "application/json");
                  _response = await _client.PutAsync(BASE_URL + modalidadeBolsaId, content);
              }
              #endregion

              #region Delete Request
              [When(@"I send a DELETE request to /modalidadebolsa/""(.+)""")]
              public async Task WhenISendADeleteRequest(string modalidadeBolsaId)
              {
                  _response = await _client.DeleteAsync(BASE_URL + modalidadeBolsaId);
              }
              #endregion

              #region Active Request
              [When(@"I send a PUT request to /modalidadebolsa/""(.+)""/ativar")]
              public async Task WhenISendAPutActiveRequest(string modalidadeBolsaId)
              {
                  _response = await _client.PutAsync(BASE_URL + modalidadeBolsaId + "/ativar", null);
              }
              #endregion

              #region Disable Request
              [When(@"I send a PUT request to /modalidadebolsa/""(.+)""/desativar")]
              public async Task WhenISendAPutDisableRequest(string modalidadeBolsaId)
              {
                  _response = await _client.PutAsync(BASE_URL + modalidadeBolsaId + "/desativar", null);
              }
              #endregion

              #region Check API Response
              [Then(@"the API response should be: ""(.+)""")]
              public void ThenApiResponse(string StatusCode)
              {
                  if (_response != null)
                  {
                      Assert.Equal(Convert.ToInt32(StatusCode), (int)_response.StatusCode);
                  }
              }
              #endregion
          }
      }
    expected_output: "ONLY the C# code generated without the code block like ```, DO NOT USE ANY MARKDOWN TAG. Also the justifications for what was generated."
  
  xunit_review:
    description: |
          Based on the feature below and the given code, review and adjust the xUnit.net test code if necessary. Pay close attention to coding inconsistencies, syntax errors, and adherence to best practices. Verify that the tests cover all scenarios described in the feature and that edge cases are accounted for. Focus on making the tests efficient and readable, and ensure that they follow xUnit.net standards.
          {feature}
    output_example: |
      Aqui está um exemplo de saída:

      ﻿using ConectaFapes.Application.DTOs.CadastroModalidadesBolsas.Request;
      using ConectaFapes.Application.DTOs.CadastroModalidadesBolsas.Response;
      using ConectaFapes.Test.Shared;
      using System.Net;
      using System.Text;
      using System.Text.Json;
      using Xunit.Gherkin.Quick;

      namespace ConectaFapes.Test.Steps
      {
          [FeatureFile("../../../Features/modalidadebolsaFeature.feature")]
          [Collection(WebApplicationFactoryParameters.CollectionName)]
          public class ModalidadeBolsaStep : Xunit.Gherkin.Quick.Feature
          {
              private const string BASE_URL = "https://localhost:3000/api/modalidadebolsa/";
              private readonly WebApplicationFactory _factory;
              private readonly HttpClient _client;
              private HttpResponseMessage? _response;
              private ApiDataProvider _provider;

              public ModalidadeBolsaStep(WebApplicationFactory factory)
              {
                  _factory = factory;
                  _client = _factory.CreateClient(); // new HttpClient();
                  _provider = new ApiDataProvider(_client);
              }

              #region Check if API is running
              [Given("I have access to the ModalidadeBolsa API")]
              public async Task IHaveAccessAPI()
              {
                  var response = await _client.GetAsync(BASE_URL);
                  Assert.Equal(HttpStatusCode.OK, response.StatusCode);
              }
              #endregion

              #region Retrieve Request
              [When(@"I send a GET request to /modalidadebolsa/""(.+)""")]
              public async Task WhenISendAGetRequest(string modalidadeBolsaId)
              {
                  _response = await _client.GetAsync(BASE_URL + modalidadeBolsaId);
              }
              #endregion

              #region Post Request
              [When(@"I send a POST request to /modalidadebolsa with the following ModalidadeBolsa details: ""(.+)"", ""(.+)""")]
              public async Task WhenISendAPostRequest(string sigla, string nome)
              {
                  var modalidadeBolsa = new ModalidadeBolsaRequestDTO
                  {
                      Sigla = StringValidator.CheckEmptyString(sigla),
                      Nome = StringValidator.CheckEmptyString(nome)
                  };

                  var content = new StringContent(JsonSerializer.Serialize(modalidadeBolsa), Encoding.UTF8, "application/json");
                  _response = await _client.PostAsync(BASE_URL, content);
              }
              #endregion

              #region Put Request
              [When(@"I send a PUT request to /modalidadebolsa/""(.+)"" with the following ModalidadeBolsa details: ""(.+)"", ""(.+)""")]
              public async Task WhenISendAPutRequest(string modalidadeBolsaId, string sigla, string nome)
              {
                  ModalidadeBolsaResponseDTO modalidadeBolsa = await _provider.GetEntityById<ModalidadeBolsaResponseDTO>("ModalidadeBolsa", modalidadeBolsaId);

                  modalidadeBolsa.Sigla = StringValidator.CheckEmptyString(sigla);
                  modalidadeBolsa.Nome = StringValidator.CheckEmptyString(nome);

                  var content = new StringContent(JsonSerializer.Serialize(modalidadeBolsa), Encoding.UTF8, "application/json");
                  _response = await _client.PutAsync(BASE_URL + modalidadeBolsaId, content);
              }
              #endregion

              #region Delete Request
              [When(@"I send a DELETE request to /modalidadebolsa/""(.+)""")]
              public async Task WhenISendADeleteRequest(string modalidadeBolsaId)
              {
                  _response = await _client.DeleteAsync(BASE_URL + modalidadeBolsaId);
              }
              #endregion

              #region Active Request
              [When(@"I send a PUT request to /modalidadebolsa/""(.+)""/ativar")]
              public async Task WhenISendAPutActiveRequest(string modalidadeBolsaId)
              {
                  _response = await _client.PutAsync(BASE_URL + modalidadeBolsaId + "/ativar", null);
              }
              #endregion

              #region Disable Request
              [When(@"I send a PUT request to /modalidadebolsa/""(.+)""/desativar")]
              public async Task WhenISendAPutDisableRequest(string modalidadeBolsaId)
              {
                  _response = await _client.PutAsync(BASE_URL + modalidadeBolsaId + "/desativar", null);
              }
              #endregion

              #region Check API Response
              [Then(@"the API response should be: ""(.+)""")]
              public void ThenApiResponse(string StatusCode)
              {
                  if (_response != null)
                  {
                      Assert.Equal(Convert.ToInt32(StatusCode), (int)_response.StatusCode);
                  }
              }
              #endregion
          }
      }
    expected_output: "ONLY the xUnit.net test code generated without the code block like ```, DO NOT USE ANY MARKDOWN TAG"


  debate:
    description: |
      Based on the feature, xUnit code, and given feedback, discuss and return feedback on possible improvements and approaches to the problem, along with a new code proposal.
      NOTE: Use Given, When, Then annotations with parameter binding. DO NOT use Theory, InlineData, or Fact.
      {feature}
    output_example: |
      Aqui está um exemplo de saída:

      ﻿using ConectaFapes.Application.DTOs.CadastroModalidadesBolsas.Request;
      using ConectaFapes.Application.DTOs.CadastroModalidadesBolsas.Response;
      using ConectaFapes.Test.Shared;
      using System.Net;
      using System.Text;
      using System.Text.Json;
      using Xunit.Gherkin.Quick;

      namespace ConectaFapes.Test.Steps
      {
          [FeatureFile("../../../Features/modalidadebolsaFeature.feature")]
          [Collection(WebApplicationFactoryParameters.CollectionName)]
          public class ModalidadeBolsaStep : Xunit.Gherkin.Quick.Feature
          {
              private const string BASE_URL = "https://localhost:3000/api/modalidadebolsa/";
              private readonly WebApplicationFactory _factory;
              private readonly HttpClient _client;
              private HttpResponseMessage? _response;
              private ApiDataProvider _provider;

              public ModalidadeBolsaStep(WebApplicationFactory factory)
              {
                  _factory = factory;
                  _client = _factory.CreateClient(); // new HttpClient();
                  _provider = new ApiDataProvider(_client);
              }

              #region Check if API is running
              [Given("I have access to the ModalidadeBolsa API")]
              public async Task IHaveAccessAPI()
              {
                  var response = await _client.GetAsync(BASE_URL);
                  Assert.Equal(HttpStatusCode.OK, response.StatusCode);
              }
              #endregion

              #region Retrieve Request
              [When(@"I send a GET request to /modalidadebolsa/""(.+)""")]
              public async Task WhenISendAGetRequest(string modalidadeBolsaId)
              {
                  _response = await _client.GetAsync(BASE_URL + modalidadeBolsaId);
              }
              #endregion

              #region Post Request
              [When(@"I send a POST request to /modalidadebolsa with the following ModalidadeBolsa details: ""(.+)"", ""(.+)""")]
              public async Task WhenISendAPostRequest(string sigla, string nome)
              {
                  var modalidadeBolsa = new ModalidadeBolsaRequestDTO
                  {
                      Sigla = StringValidator.CheckEmptyString(sigla),
                      Nome = StringValidator.CheckEmptyString(nome)
                  };

                  var content = new StringContent(JsonSerializer.Serialize(modalidadeBolsa), Encoding.UTF8, "application/json");
                  _response = await _client.PostAsync(BASE_URL, content);
              }
              #endregion

              #region Put Request
              [When(@"I send a PUT request to /modalidadebolsa/""(.+)"" with the following ModalidadeBolsa details: ""(.+)"", ""(.+)""")]
              public async Task WhenISendAPutRequest(string modalidadeBolsaId, string sigla, string nome)
              {
                  ModalidadeBolsaResponseDTO modalidadeBolsa = await _provider.GetEntityById<ModalidadeBolsaResponseDTO>("ModalidadeBolsa", modalidadeBolsaId);

                  modalidadeBolsa.Sigla = StringValidator.CheckEmptyString(sigla);
                  modalidadeBolsa.Nome = StringValidator.CheckEmptyString(nome);

                  var content = new StringContent(JsonSerializer.Serialize(modalidadeBolsa), Encoding.UTF8, "application/json");
                  _response = await _client.PutAsync(BASE_URL + modalidadeBolsaId, content);
              }
              #endregion

              #region Delete Request
              [When(@"I send a DELETE request to /modalidadebolsa/""(.+)""")]
              public async Task WhenISendADeleteRequest(string modalidadeBolsaId)
              {
                  _response = await _client.DeleteAsync(BASE_URL + modalidadeBolsaId);
              }
              #endregion

              #region Active Request
              [When(@"I send a PUT request to /modalidadebolsa/""(.+)""/ativar")]
              public async Task WhenISendAPutActiveRequest(string modalidadeBolsaId)
              {
                  _response = await _client.PutAsync(BASE_URL + modalidadeBolsaId + "/ativar", null);
              }
              #endregion

              #region Disable Request
              [When(@"I send a PUT request to /modalidadebolsa/""(.+)""/desativar")]
              public async Task WhenISendAPutDisableRequest(string modalidadeBolsaId)
              {
                  _response = await _client.PutAsync(BASE_URL + modalidadeBolsaId + "/desativar", null);
              }
              #endregion

              #region Check API Response
              [Then(@"the API response should be: ""(.+)""")]
              public void ThenApiResponse(string StatusCode)
              {
                  if (_response != null)
                  {
                      Assert.Equal(Convert.ToInt32(StatusCode), (int)_response.StatusCode);
                  }
              }
              #endregion
          }
      }
    expected_output: "ONLY the C# code generated without the code block like ```, DO NOT USE ANY MARKDOWN TAG. The feedback on the previous proposal and the new proposal with justifications for this"
  
  manager_debate_xunit_task:
    description: |
      {feature}
      Based on the feature above, review the generated xUnit.net code and develop an improved final version based on it.
      NOTE: Use Given, When, Then annotations with parameter binding. DO NOT use Theory, InlineData, or Fact.
    expected_output: "ONLY the C# code generated without the code block like ```, DO NOT USE ANY MARKDOWN TAG"
  
  manager_xunit_task:
    description: "Read and compare all generated C# xUnit codes and develop a final version based on them."
    output_example: |
      Aqui está um exemplo de saída:

      ﻿using ConectaFapes.Application.DTOs.CadastroModalidadesBolsas.Request;
      using ConectaFapes.Application.DTOs.CadastroModalidadesBolsas.Response;
      using ConectaFapes.Test.Shared;
      using System.Net;
      using System.Text;
      using System.Text.Json;
      using Xunit.Gherkin.Quick;

      namespace ConectaFapes.Test.Steps
      {
          [FeatureFile("../../../Features/modalidadebolsaFeature.feature")]
          [Collection(WebApplicationFactoryParameters.CollectionName)]
          public class ModalidadeBolsaStep : Xunit.Gherkin.Quick.Feature
          {
              private const string BASE_URL = "https://localhost:3000/api/modalidadebolsa/";
              private readonly WebApplicationFactory _factory;
              private readonly HttpClient _client;
              private HttpResponseMessage? _response;
              private ApiDataProvider _provider;

              public ModalidadeBolsaStep(WebApplicationFactory factory)
              {
                  _factory = factory;
                  _client = _factory.CreateClient(); // new HttpClient();
                  _provider = new ApiDataProvider(_client);
              }

              #region Check if API is running
              [Given("I have access to the ModalidadeBolsa API")]
              public async Task IHaveAccessAPI()
              {
                  var response = await _client.GetAsync(BASE_URL);
                  Assert.Equal(HttpStatusCode.OK, response.StatusCode);
              }
              #endregion

              #region Retrieve Request
              [When(@"I send a GET request to /modalidadebolsa/""(.+)""")]
              public async Task WhenISendAGetRequest(string modalidadeBolsaId)
              {
                  _response = await _client.GetAsync(BASE_URL + modalidadeBolsaId);
              }
              #endregion

              #region Post Request
              [When(@"I send a POST request to /modalidadebolsa with the following ModalidadeBolsa details: ""(.+)"", ""(.+)""")]
              public async Task WhenISendAPostRequest(string sigla, string nome)
              {
                  var modalidadeBolsa = new ModalidadeBolsaRequestDTO
                  {
                      Sigla = StringValidator.CheckEmptyString(sigla),
                      Nome = StringValidator.CheckEmptyString(nome)
                  };

                  var content = new StringContent(JsonSerializer.Serialize(modalidadeBolsa), Encoding.UTF8, "application/json");
                  _response = await _client.PostAsync(BASE_URL, content);
              }
              #endregion

              #region Put Request
              [When(@"I send a PUT request to /modalidadebolsa/""(.+)"" with the following ModalidadeBolsa details: ""(.+)"", ""(.+)""")]
              public async Task WhenISendAPutRequest(string modalidadeBolsaId, string sigla, string nome)
              {
                  ModalidadeBolsaResponseDTO modalidadeBolsa = await _provider.GetEntityById<ModalidadeBolsaResponseDTO>("ModalidadeBolsa", modalidadeBolsaId);

                  modalidadeBolsa.Sigla = StringValidator.CheckEmptyString(sigla);
                  modalidadeBolsa.Nome = StringValidator.CheckEmptyString(nome);

                  var content = new StringContent(JsonSerializer.Serialize(modalidadeBolsa), Encoding.UTF8, "application/json");
                  _response = await _client.PutAsync(BASE_URL + modalidadeBolsaId, content);
              }
              #endregion

              #region Delete Request
              [When(@"I send a DELETE request to /modalidadebolsa/""(.+)""")]
              public async Task WhenISendADeleteRequest(string modalidadeBolsaId)
              {
                  _response = await _client.DeleteAsync(BASE_URL + modalidadeBolsaId);
              }
              #endregion

              #region Active Request
              [When(@"I send a PUT request to /modalidadebolsa/""(.+)""/ativar")]
              public async Task WhenISendAPutActiveRequest(string modalidadeBolsaId)
              {
                  _response = await _client.PutAsync(BASE_URL + modalidadeBolsaId + "/ativar", null);
              }
              #endregion

              #region Disable Request
              [When(@"I send a PUT request to /modalidadebolsa/""(.+)""/desativar")]
              public async Task WhenISendAPutDisableRequest(string modalidadeBolsaId)
              {
                  _response = await _client.PutAsync(BASE_URL + modalidadeBolsaId + "/desativar", null);
              }
              #endregion

              #region Check API Response
              [Then(@"the API response should be: ""(.+)""")]
              public void ThenApiResponse(string StatusCode)
              {
                  if (_response != null)
                  {
                      Assert.Equal(Convert.ToInt32(StatusCode), (int)_response.StatusCode);
                  }
              }
              #endregion
          }
      }
    expected_output: "ONLY the C# xUnit code generated without the code block like ```, DO NOT USE ANY MARKDOWN TAG"
