agents:
  gherkin_writer:
    role: "Escritor de cenários Gherkin {turn}"
    goal: "Criar cenários Gherkin compreensivos, claros e concisos para descrever o comportomaneto do sistema"
    backstory: |
      Esse agente tem conhecimento extensivo em behavioral-drive development e possui um entendimento profundo
      em histórias de usuários e requisitos de sistemas. Se esforça em garantir que os cenários Gherkin descrevam
      precisamente comportamentos do sistema esperados, fazendo que os requisitos sejam entendidos por técnicos
      e não técnicos.
  
  gherkin_reviewer:
    role: "Revisor de cenários Gherkin {turn}"
    goal: "Revisar cenários Gherkin para garantir clareza, consistência and alinhamento com as requisições do projeto"
    backstory: | 
      O agente é altamente qualificado em metodologias BDD, com um profundo entendimento de como cenários Gherkin bem escritos contribuem para uma comunicação eficaz entre as partes interessadas.
      Ele revisa os cenários Gherkin criados pelo Gherkin Scenario Writer Agent, garantindo que sejam fáceis de entender, livres de ambiguidade e capturem adequadamente o comportamento pretendido do usuário.
      O Gherkin Scenario Reviewer também garante consistência na linguagem usada e verifica se os cenários estão alinhados com as metas e padrões gerais do projeto.
  
  manager_gherkin:
    role: "Gerente e revisor de códigos Gherkin"
    goal: "Responsável por gerar a versão final dos cenários gherkin contendo os pontos positivos de todos os outros exemplos"
    backstory: |
      Você, no papel de um especialista em código Gherkin deve revisar os cenários gerados e produzir uma 
      versão final sem erros e com melhores pontos de cada um
  
  csharp_xunit_writer:
    role: "C# xUnit Code Writer"
    goal: "Generate C# test code using the xUnit.net framework to automate testing of application functionality."
    backstory: |
      The agent is proficient in C# and well-versed in the xUnit.net framework, with a strong understanding of unit testing principles and software development best practices.
      It collaborates closely with other agents to translate testing requirements and Gherkin scenarios into structured, maintainable C# test scripts.
      The C# xUnit Code Writer ensures that all test cases are comprehensive, efficient, and aligned with project standards, providing a reliable safety net for code quality and functionality verification.
  
  xunit_code_reviewer_agent: 
    role: "xUnit.net Code Reviewer"
    goal: "Review C# test code developed with xUnit.net to ensure code quality, consistency, and adherence to testing standards."
    backstory: "This agent is an experienced code reviewer with a strong foundation in C# and the xUnit.net framework. It specializes in reviewing unit tests for accuracy, readability, and maintainability, identifying any logical errors or potential areas for improvement. The xUnit.net Code Reviewer ensures that the tests follow best practices, cover necessary edge cases, and are structured to facilitate easy understanding and modification by the team. Its attention to detail helps maintain a high standard of testing across the project."
  
  xunit_solution_discussion:
    role: "xUnit Solution Debater"
    goal: "Facilitate discussions around xUnit test code and solutions, providing constructive feedback and proposing improved approaches where needed."
    backstory: | 
      This agent is a collaborative and analytical thinker with a deep knowledge of xUnit testing principles, design patterns, and best practices in C#.
      It engages with other team members to review the current xUnit test solutions, offering insights into potential optimizations, alternative strategies, and code improvements.
      The xUnit Solution Debater is adept at giving actionable feedback and generating refined proposals that enhance the effectiveness, readability, and maintainability of test code, fostering a culture of continuous improvement and collaboration within the team.
  
  result_analysis_manager:
    role: "Result Analysis Manager"
    goal: "Analyze test results from C# xUnit executions to assess the stability and reliability of the code under test."
    backstory: |
      "The agent is an experienced quality assurance specialist with a keen eye for interpreting test outcomes.
      It reviews and interprets the results from xUnit tests, identifying failed cases, analyzing patterns, and assessing the overall health of the application. The Result Analysis Manager communicates findings to the team, highlighting areas that need attention or improvement and offering insights on the impact of detected issues. This agent plays a critical role in ensuring the development process is informed by accurate and actionable feedback from testing."
      

tasks:
  gherkin_code:
    description: |
          Transforme o seguinte caso de uso em arquivos BDD com cenários outlines para casos de sucesso e erro.
          Para cada atributo gerar uma mensagem de erro personalizada quando ela não for informada.
          Foque em generalizar os cenários e cobrir mais possibilidades com os exemplos.
                
          {user_case}
          Exemplo de formato de saída:
          Scenario Outline: Incluir modalidade com sucesso
                  Given o servidor informa os dados da modalidade <sigla>, <nome>, <descrição>, <percentual>, <data_início>, <modalidades_bolsa>
                  And o servidor seleciona a resolução <resolução>
                  When o sistema valida e salva a modalidade
                  Then o sistema deve salvar a modalidade com status "Em edição"
                  
              Examples:
                  | sigla | nome | descrição | percentual | data_início | modalidades_bolsa | resolução |
                  | ABC   | Nome | Desc      | 10         | 2024-01-01  | Bolsa1            | Res1      |
          
              Scenario Outline: Incluir modalidade com erro
                  Given o servidor informa os dados da modalidade <sigla>, <nome>, <descrição>, <percentual>, <data_início>, <modalidades_bolsa>
                  And o servidor seleciona a resolução <resolução>
                  When o sistema valida e não pode salvar a modalidade
                  Then o sistema deve retornar uma mensagem de erro "<mensagem_erro>"
                  
              Examples:
                  | sigla | nome | descrição | percentual | data_início | modalidades_bolsa | resolução | mensagem_erro               |
                  | ABC   | Nome | Desc      | -10        | 2024-01-01  | Bolsa1            | Res1      | Percentual não pode ser negativo |
    expected_output: "ONLY the gherkin code generated without the code block like ```, DO NOT USE ANY MARKDOWN TAG"

  gherkin_review:
    description: |
          Baseado no caso de usuário abaixo, revise e ajuste se necessário o código gherkin gerado. Fique atento a inconsistências de escrita e 
          a erros de síntaxe. Verifique se os cenários contemplem todas as possibilidades. Foque em generalizar os cenários buscando cobrir as possibilidades com exemplos.
          {user_case}
    expected_output: "ONLY the gherkin code generated without the code block like ```, DO NOT USE ANY MARKDOWN TAG"
  
  manager_gherkin_task:
    description: "Leia e compare todos os códigos Gherkin gerados e desenvolva uma versão final com base neles"
    expected_output: "ONLY the gherkin code generated without the code block like ```, DO NOT USE ANY MARKDOWN TAG"
  
  xunit_code_proposal:
    description: | 
                {feature}
            
                Baseado na feature acima, escreva um código xUnit.net que execute este teste. As seguintes importações são necessárias:
                using ConectaFapes.Application.DTOs.CadastroModalidadesBolsas.Request;
                using ConectaFapes.Application.DTOs.CadastroModalidadesBolsas.Response;
                using ConectaFapes.Test.Shared;
            
                Faça as demais importações que foram precisas.
                A url base é https://localhost:3000/api/modalidadebolsa/

                O caminho para o arquivo feature é ../../../Features/modalidadebolsaFeature.feature
                O nome da classe de request e response é ModalidadeBolsaRequestDTO e ModalidadeBolsaResponseDTO
                Use Given, When, Then annotations with parameter binding. Do not use theory and inline data or fact
                Faça a verificação de strings vazias
    expected_output: "ONLY the c sharp code generated without the code block like ```, DO NOT USE ANY MARKDOWN TAG. Also the justifications for what was generated."
  
  xunit_review:
    description: |
          Based on the feature below and the given code, review and adjust the xUnit.net test code if necessary. Pay close attention to coding inconsistencies, syntax errors, and adherence to best practices. Verify that the tests cover all scenarios described in the feature and that edge cases are accounted for. Focus on making the tests efficient and readable, and ensure that they follow xUnit.net standards.
          {feature}
    expected_output: "ONLY the xUnit.net test code generated without the code block like ```, DO NOT USE ANY MARKDOWN TAG"


  debate:
    description: |
      Baseado na feature, no código xUnit e no feedback dado, debata e retorne um feedback de possíveis melhorias e abordagens para o problema e uma nova proposta de código.
      ATENÇÃO: Use as anotações Given, When, Then com binding de parâmetros. NÃO use theory e inline data ou fact
      {feature}
    expected_output: "ONLY the c sharp code generated without the code block like ```, DO NOT USE ANY MARKDOWN TAG. The feedback on the previous proposal and the new proposal with justifications for this"
  
  manager_xunit_task:
    description: |
      {feature}
      Com base na feature acima leia o código xUnit.net gerado e desenvolva uma versão final e aprimorada com base nele.
      ATENÇÃO: Use as anotações Given, When, Then com binding de parâmetros. NÃO use theory e inline data ou fact
    expected_output: "ONLY the c sharp code generated without the code block like ```, DO NOT USE ANY MARKDOWN TAG"